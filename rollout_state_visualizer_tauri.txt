Rollout Proposal: Visualizing Crafter State (Before/After) in Tauri

Goal
- Show what the Crafter environment (or modal app UI) looked like immediately before and after each LLM call in the desktop (Tauri) app, using images already captured/stored by the agent runtime.

Current State (repo review)
- Tracing v3 stores rich per-event data in SQLite via SQLAlchemy models (see synth_ai/tracing_v3/turso/models.py).
  - Table `events` has JSON columns `system_state_before` and `system_state_after` for snapshots per event, including LMCAISEvent (LLM calls) and EnvironmentEvent.
- Note: In agent_demos rollouts, visuals are typically captured around environment steps, not model calls.
- Crafter traces exist in `traces/` JSON exports and `synth_ai/traces/*.duckdb`. The JSON exports show `system_state_before/after` but currently do not include image URIs.
- The Tauri app (`tauri/web`) currently lists experiments and shows high-level stats only. Backend (`tauri/src-tauri/src/main.rs`) exposes DB commands for experiments/sessions, but not step-level events nor any image access.

Source of Images (agent_demos)
- `synth_ai/environments/examples/crafter_classic/agent_demos/crafter_trace_evaluation.py` captures initial and per-step images via `env.engine.env.render()` and embeds them as base64 PNG strings (`image_base64`) in EnvironmentComputeStep outputs within its trace JSON.
- The v3 DB path does not yet store these images; Environment/Runtime events record states but not pixel URIs. We will standardize URIs for new runs and optionally import legacy base64 images.

Design: Minimal, Backward-Compatible Additions
1) Standardize image references in `system_state_{before,after}`
   - Add optional keys for visual snapshots on any event where visuals are meaningful (primarily EnvironmentEvent rows for Crafter steps):
     - `visuals`: { "frame_uri": string, "ui_uri"?: string, "thumb_uri"?: string }
       - `frame_uri`: primary pixels (raw env frame or composite)
       - `ui_uri`: optional modal/app UI screenshot if present
       - `thumb_uri`: optional pre-generated thumbnail for fast lists
   - Keep values as repo-relative POSIX paths or `file://` URLs, e.g.:
     - `traces/v3/assets/<session_id>/<step_index>_before.png`
     - `traces/v3/assets/<session_id>/<step_index>_after.png`
   - Do not store binary image data in the DB; store paths only. This keeps DB small and portable.

2) Asset layout on disk
   - Root: `traces/v3/assets/` (configurable via env `SYNTH_TRACE_ASSETS_DIR`).
   - Per-session folder: `assets/<session_id>/`.
   - Filenames: `<step_index>_{before,after}.png` (and optional `<step_index>_{before,after}_ui.png` and `_thumb.jpg`).
   - For multi-LLM-calls per step, include a call index: `<step_index>_<call_idx>_{before,after}.png`.

3) Capture points
   - On each environment step (tool execution), capture before/after frames and attach to the corresponding EnvironmentEvent (`system_state_before.visuals` and `system_state_after.visuals`).
   - Optionally also capture around LMCAISEvent boundaries if you want to visualize pre/post model state, but in-game pixels belong to environment steps.
   - If an intermediate modal/app state is displayed (e.g., UI overlay), store `ui_uri` alongside `frame_uri`.

4) Tauri backend API (Rust, sqlx)
   - New command: `session_events(session_id: String) -> Vec<EventWithVisuals>`
     - SQL (ordered by timestep index, then created_at):
       SELECT e.id, e.event_type, e.model_name, e.provider, e.event_time,
              e.system_state_before, e.system_state_after,
              t.step_index, t.step_id
       FROM events e
       LEFT JOIN session_timesteps t ON e.timestep_id = t.id
       WHERE e.session_id = ? AND e.event_type = 'cais'
       ORDER BY t.step_index ASC, e.created_at ASC;
     - Parse `system_state_{before,after}` JSON; extract `visuals.frame_uri` and `visuals.ui_uri` if present.
     - Return compact structs:
       { id, step_index, step_id, model_name, provider,
         before_uri?: string, before_ui_uri?: string,
         after_uri?: string, after_ui_uri?: string }
   - New command: `read_image_base64(path: String) -> String`
     - Reads local file, base64 encodes it. Frontend uses `data:image/png;base64,...` to display safely without file protocol issues.
     - Optional: Provide a guard that the path is under an approved assets root.

5) Frontend (tauri/web)
   - Experiment Detail table already lists sessions. Add onClick on a session row to load event visuals:
     - Call `session_events(session_id)` and render a scrollable list of steps.
     - For each event: show model name, step index, and a “Before | After” toggle with images side-by-side (or stacked).
     - If both `frame_uri` and `ui_uri` exist, show tabs “Frame/UI”.
     - When images come from `read_image_base64`, render `<img src="data:..." />`.
   - Optional legacy support: If an experiment references agent_demos viewer trace files, parse their JSON to read `image_base64` and display without writing to DB.
   - Fallback: If no URIs and no legacy images, show a compact JSON diff of `system_state_before` vs `system_state_after`.

6) Permissions and safety
   - Prefer `read_image_base64` Rust command to avoid exposing `file://` broadly in the webview.
   - Restrict file reads to `SYNTH_TRACE_ASSETS_DIR` (default `traces/v3/assets/`).

7) Migration / Backfill strategy
   - For new runs: ensure the Crafter environment step path saves frames to `assets/<session_id>/` and populates `visuals.frame_uri` on EnvironmentEvent rows.
   - For existing agent_demos traces: add an importer to write base64 images to disk under the assets layout and update matching EnvironmentEvent JSON with `frame_uri`; or load `image_base64` directly from the legacy JSON in the Tauri UI.

Incremental Rollout Plan
Phase 1 (data and API)
- Add image snapshot saving in the Crafter environment step flow.
- Populate `system_state_{before,after}.visuals.frame_uri` (and `_ui_uri` when applicable).
- Implement `session_events` and `read_image_base64` in Tauri backend.

Phase 2 (UI)
- Add the session click interaction in the existing Experiment Detail panel.
- Implement the per-step list with Before/After viewer.
- Add lightweight loading states and error handling.

Phase 3 (polish)
- Optional thumbnails and lazy loading.
- Keyboard navigation across steps; zoom/pan on images.
- Toggle for showing the JSON diff alongside images.

Interfaces (sketch)
-- Example EnvironmentEvent addition (Python):
  event = EnvironmentEvent(
    ..., 
    system_state_before={
      "visuals": {"frame_uri": f"traces/v3/assets/{session_id}/{step_idx}_{call_idx}_before.png"}
    },
    system_state_after={
      "visuals": {"frame_uri": f"traces/v3/assets/{session_id}/{step_idx}_{call_idx}_after.png"}
    },
  )

- Tauri Rust return payload (EventWithVisuals):
  {
    id: number,
    step_index: number | null,
    step_id: string | null,
    model_name: string | null,
    provider: string | null,
    before_uri?: string, before_ui_uri?: string,
    after_uri?: string, after_ui_uri?: string
  }

Validation Notes
- Schema changes are not required; we leverage existing JSON fields.
- No DB migration required; only recording and reading standardized keys.
- Back end reads remain simple (one SELECT with join).
- Front end changes are isolated to `App.tsx` and styles, with minimal disruption.

Open Questions / Options
- If Crafter also outputs a semantic overlay (inventory, grid highlights), should we save composite frames or separate layers? Start with raw frames; consider composites as a follow-up.
- Consider an HTTP endpoint on the Crafter service to fetch frames by `(session, step, call_idx)` when local files are missing.
- For very large image sets, add thumbnail pre-gen and progressive loading.

Success Criteria
- For a new experiment run, user can click an experiment → a session → see a chronological list of LM calls, with before/after frames displayed for each (when available), all within the Tauri app.

Tauri Integration Map (Where Things Live)
- Backend (Rust): `tauri/src-tauri/src/main.rs`
  - Add structs:
    - `EventWithVisuals { id, step_index, step_id, model_name, provider, before_uri, before_ui_uri, after_uri, after_ui_uri }`
  - Add commands:
    - `#[tauri::command] async fn session_events(session_id: String) -> Result<Vec<EventWithVisuals>, String>`
      - Query `events` joined to `session_timesteps`, filter `event_type IN ('environment','runtime','cais')`, but primarily render `environment`.
      - Extract `system_state_before/after.visuals.*` into URI fields; omit rows without any visuals unless `show_all` flag provided.
    - `#[tauri::command] async fn read_image_base64(path: String) -> Result<String, String>`
      - Validate `path` under an allowed base dir (env `SYNTH_TRACE_ASSETS_DIR` or default `traces/v3/assets`). Read + base64 encode PNG.
  - Placement: keep near existing `experiment_detail`, `run_evals` for cohesion. Register in `invoke_handler!` list.

- Frontend (Web): `tauri/web/src`
  - Entry: `App.tsx`
    - Extend Experiment Detail panel: when a session row is clicked, set `selectedSessionId` and show a new right-side panel or drawer named “Rollout Viewer”.
    - On open: `invoke('session_events', { sessionId })` to fetch events with visuals. Lazy-load images via `invoke('read_image_base64', { path })` just-in-time when each card becomes visible.
  - New component (suggested): `src/components/RolloutViewer.tsx`
    - Props: `{ sessionId: string, onClose: () => void }`.
    - Renders a vertical list of event cards (ordered by `step_index`, then event time), each with:
      - Header: `Step <n> · <model_name or environment>`
      - Toggle: Before | After, and optional tabs Frame | UI
      - Image: `<img src={dataUrl} />` where `dataUrl` comes from `read_image_base64`
      - Fallback: JSON diff of `system_state_before` vs `system_state_after` when no images
  - Styles: reuse `styles.css`; add minimal classes `.rollout-viewer`, `.event-card`, `.img-wrap`.

- Legacy JSON support (optional):
  - Add a small utility in `RolloutViewer.tsx` to load agent_demos viewer JSON files (if a configured path is set, e.g., `SYNTH_LEGACY_CRAFTER_VIEWER_DIR` via an `invoke` to read a directory). Parse `image_base64` fields to display images without DB URIs.
  - This path is optional and does not block the DB-backed viewer.

Developer Pointers (Where to Look)
- Backend queries and command wiring: `tauri/src-tauri/src/main.rs`
- Frontend experiment list and detail: `tauri/web/src/App.tsx`
- Suggested new viewer component: `tauri/web/src/components/RolloutViewer.tsx` (create this file)
- Global styles: `tauri/web/src/styles.css`
- Crafter image capture reference (legacy): `synth_ai/environments/examples/crafter_classic/agent_demos/crafter_trace_evaluation.py`

Implementation Details (Concrete Logic)
- Backend (Rust, sqlx + serde_json)
  - Types:
    - `struct EventWithVisuals { id: i64, step_index: Option<i64>, step_id: Option<String>, event_type: String, model_name: Option<String>, provider: Option<String>, event_time: Option<f64>, before_uri: Option<String>, before_ui_uri: Option<String>, after_uri: Option<String>, after_ui_uri: Option<String> }`
  - Query (SQLite):
    - SQL: select events joined with timesteps and filter to rows likely to have visuals.
      SELECT e.id, e.event_type, e.model_name, e.provider, e.event_time,
             e.system_state_before AS before_json, e.system_state_after AS after_json,
             t.step_index, t.step_id
      FROM events e
      LEFT JOIN session_timesteps t ON e.timestep_id = t.id
      WHERE e.session_id = ? AND e.event_type IN ('environment', 'cais')
      ORDER BY t.step_index ASC, e.created_at ASC, e.id ASC;
    - For each row, parse `before_json` and `after_json` as serde_json::Value and extract:
      - `before_uri = before_json["visuals"]["frame_uri"].as_str()`
      - `before_ui_uri = before_json["visuals"]["ui_uri"].as_str()`
      - `after_uri = after_json["visuals"]["frame_uri"].as_str()`
      - `after_ui_uri = after_json["visuals"]["ui_uri"].as_str()`
      - Only include events where any of these URIs is present unless a `show_all` flag is supplied.
  - Command signatures to add in `main.rs`:
    - `#[tauri::command] async fn session_events(state: State<'_, Arc<AppState>>, session_id: String, show_all: Option<bool>) -> Result<Vec<EventWithVisuals>, String>`
      - Uses existing `state.pool` to run the SQL above, maps rows to `EventWithVisuals`.
    - `#[tauri::command] async fn read_image_base64(path: String) -> Result<String, String>`
      - Resolve allowed base dir: env `SYNTH_TRACE_ASSETS_DIR` else default `<repo_root>/traces/v3/assets`.
      - Validate the requested `path` is within allowed dir, then `std::fs::read()` and base64 encode.
      - Return `Ok(format!("data:image/png;base64,{}", b64))` (or detect by extension for jpeg).
  - Registration:
    - Add both commands to the `invoke_handler!` list near existing ones.

- Frontend (Rollouts tab + Viewer component)
  - In `App.tsx` (already added navbar):
    - Wire the Rollouts table “Open” button to set `selectedSessionId` and open `<RolloutViewer sessionId={...} />` in a right-side panel.
    - Use `invoke('session_events', { sessionId, showAll: false })` to fetch visual events.
  - New file `tauri/web/src/components/RolloutViewer.tsx` (sketch):
    - State: `events`, `expandedIndex`, `loadingImageIndex`.
    - For each event: show step header and two image slots (Before/After). For each slot:
      - If `before_uri` (or `after_uri`) exists, call `invoke('read_image_base64', { path: before_uri })` on demand and set `imgSrc` to returned data URL.
      - Else, show a small placeholder with “No snapshot”.
    - Optional tabs for Frame/UI if `*_ui_uri` present.
    - Provide a close button to dismiss the viewer.
  - Minimal props interface:
    - `type EventWithVisuals = { id: number; step_index?: number; step_id?: string; event_type: string; model_name?: string; provider?: string; before_uri?: string; before_ui_uri?: string; after_uri?: string; after_ui_uri?: string }`

- Asset Directory Rules
  - Default: `traces/v3/assets/<session_id>/<step_idx>_{before,after}.png`.
  - Env override: `SYNTH_TRACE_ASSETS_DIR` to change root for multi-repo setups.
  - Validation: Backend denies reads outside this directory (prevents arbitrary file access).

- Mapping from Existing Data to URIs (New Runs)
  - Crafter environment step code (where actions are executed) should:
    - Render image before and after each step.
    - Save files under assets dir with consistent naming.
    - Write `system_state_before.visuals.frame_uri` and `system_state_after.visuals.frame_uri` to the EnvironmentEvent prior to DB insert.

- Legacy Agent_Demos JSON (Optional)
  - If you want to view old viewer traces without DB migration:
    - Add a config input in the Rollouts tab to pick a folder of legacy JSON files (e.g., output_dir/viewer/trace.json).
    - Parse `EnvironmentComputeStep.outputs[].image_base64` and render them directly in a simple list.
    - This operates entirely client-side and bypasses the DB for visuals.

Step-by-Step Implementation Checklist
1) Backend
   - Add `EventWithVisuals` struct and the two commands in `main.rs`.
   - Update `invoke_handler!` to include them.
2) Frontend
   - Add `selectedSessionId` state to the Rollouts tab in `App.tsx`.
   - Create `src/components/RolloutViewer.tsx` with fetch + on-demand image loading via `invoke`.
   - Wire the “Open” button in the Rollouts table to open the viewer for the clicked session.
3) Environment capture (new runs)
   - During environment step execution, save snapshots to disk and populate `visuals.frame_uri` on EnvironmentEvent before/after.
4) Optional legacy path
   - Add a toggle/field in Rollouts to select a directory with legacy JSON and display `image_base64` entries.

Testing Notes
- Use a small session with 3–5 steps and verify:
  - `session_events` returns expected URIs.
  - Images load via `read_image_base64` and display in the viewer.
  - Fallback behavior: event rows without URIs show “No snapshot”.
  - Security: reading a path outside assets dir returns an error.
